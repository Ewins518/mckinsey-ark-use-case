name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  PROJECT_NAME: { { .Values.projectName } }

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yamllint

      - name: Lint YAML files
        run: |
          find . -name "*.yaml" -o -name "*.yml" | xargs yamllint -c .yamllint.yml

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Lint Helm chart
        run: |
          helm lint chart/

      - name: Validate Kubernetes manifests
        uses: instrumenta/kubeval-action@master
        with:
          files: agents,teams,queries,models

  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        tool: [data-tool]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.tool }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: tools/examples/${{ matrix.tool }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Test Components
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install tool dependencies
        run: |
          cd tools/examples/data-tool
          pip install -r requirements.txt

      - name: Test tools
        run: |
          cd tools/examples/data-tool
          python -c "
          import main
          # Test analyze_data function
          result = main.analyze_data([1, 2, 3, 4, 5])
          assert 'mean' in result
          assert result['count'] == 5
          print('Tool tests passed!')
          "

      - name: Set up Kubernetes cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: test-cluster

      - name: Install ARK CRDs (mock)
        run: |
          # Create mock CRDs for testing
          kubectl apply -f - <<EOF
          apiVersion: apiextensions.k8s.io/v1
          kind: CustomResourceDefinition
          metadata:
            name: agents.ark.mckinsey.com
          spec:
            group: ark.mckinsey.com
            versions:
            - name: v1alpha1
              served: true
              storage: true
              schema:
                openAPIV3Schema:
                  type: object
                  properties:
                    spec:
                      type: object
                    status:
                      type: object
            scope: Namespaced
            names:
              plural: agents
              singular: agent
              kind: Agent
          EOF

      - name: Test Kubernetes manifests
        run: |
          kubectl apply --dry-run=server -f agents/examples/
          kubectl apply --dry-run=server -f teams/examples/
          kubectl apply --dry-run=server -f queries/examples/
          kubectl apply --dry-run=server -f models/examples/

  package:
    name: Package Helm Chart
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Package Helm chart
        run: |
          helm package chart/ --destination .

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Helm chart
        run: |
          helm push *.tgz oci://${{ env.REGISTRY }}/${{ github.repository }}/charts

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # kubectl apply -f manifests/staging/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, package]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # helm upgrade --install $PROJECT_NAME oci://$REGISTRY/$GITHUB_REPOSITORY/charts/{{ .Values.projectName }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
