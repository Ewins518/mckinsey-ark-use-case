apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "postgres-memory.fullname" . }}
  labels:
    {{- include "postgres-memory.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "postgres-memory.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgres-memory.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres-memory.serviceAccountName" . }}
      initContainers:
        - name: wait-for-postgres
          image: postgres:16-alpine
          command: ['sh', '-c', 'until pg_isready -d "$DATABASE_URL"; do echo "Waiting for PostgreSQL..."; sleep 2; done; echo "PostgreSQL is ready!"']
          env:
            - name: DATABASE_URL
              {{- if .Values.postgres.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-memory.fullname" . }}-postgres-pguser-{{ .Values.postgres.username | default "postgres" }}
                  key: uri
              {{- else }}
              value: "postgres://{{ .Values.postgres.username }}:{{ .Values.postgres.password }}@{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/{{ .Values.postgres.database }}?sslmode={{ .Values.postgres.sslmode }}"
              {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.memory.port }}
              protocol: TCP
          env:
            - name: DATABASE_URL
              {{- if .Values.postgres.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres-memory.fullname" . }}-postgres-pguser-{{ .Values.postgres.username | default "postgres" }}
                  key: uri
              {{- else }}
              value: "postgres://{{ .Values.postgres.username }}:{{ .Values.postgres.password }}@{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/{{ .Values.postgres.database }}?sslmode={{ .Values.postgres.sslmode }}"
              {{- end }}
            - name: PORT
              value: {{ .Values.memory.port | quote }}
            - name: TABLE_NAME
              value: {{ .Values.memory.tableName | quote }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}